## JVM 内存模型

https://zhuanlan.zhihu.com/p/38348646

![img](https://pic4.zhimg.com/80/v2-abefb713de46f1e6dd241246c0afe263_720w.webp)

**方法区**

​		线程共享。用于存放已被虚拟机加载的类信息，常量，静态变量等数据。即时编译器编译后的代码。

**堆**

​		线程共享。所有的对象实例以及数组都要在堆上分配。回收器主要管理的对象。

>  堆又可以分为新生代、老年代 。新生代又分为Eden区 S0 S1 
>
> 新创建的对象大多放在eden区、 eden区被填充满进行GC 就会把存活的对象放入一个幸存空间
>
> 再次触发GC的时候又把所有的幸存对象放入另一个幸存空间
>
> 多次存活的对象放入老年代

**本地方法栈**

​		线程私有。跟Java 虚拟机栈一样，只不过它只用在用native修饰的本地方法。

**Java虚拟机栈**

​		线程私有。存储局部变量表、操作栈、动态链接、方法出口，对象指针。

**程序计数器**

​		线程私有，用来记录线程的执行的字节码地址。





## Java 垃圾回收机制

https://www.infoq.cn/article/zoyqri4c-bfkmubmzmkn

### 引用计数法

针对每个对象分配一个空间用来记录该对象被引用的次数，如果该对象被其他对象引用就引用计数+1，删除引用就引用计数-1。当对象的引用计数为0时就可以在下一次GC的时候回收

循环依赖问题无法解决

### 可达性分析算法

可达性算法的思路就是通过一些被称之为GC Root的对象作为起点，从这些节点向下搜索。经过对象称为引用链，一个对象没有和任何引用链相连时，则证明对象不可用。

可作为Gc Root 的对象 

>    	https://blog.csdn.net/qq_46548855/article/details/128782888
>
> - 虚拟机栈（栈帧中的本地变量表）中引用的对象
> - 方法区中类静态属性引用的对象
> - 方法区中常量引用的对象
> - 本地方法栈中 JNI（即一般说的 Native 方法）引用的对象

## 如何定位OOM

### 堆内存出现的原因

堆内存分配得不合理。堆内存配置的太小，或者新生代与老年代的比例配置得不合理，导致创建对象时没有内存空间可以分配。
② 存在大对象。例如大数组、大字符串、Map、集合等。
③ 大量的静态属性，用作本地缓存的Map、List等。
④ 频繁创建对象。例如在循环中不停的创建对象。
⑤ 一次从数据库中读取大量的数据。
⑥ 数据/流量峰值，程序没有做限流，数据量突然激增，导致内存不足。
⑦ 存在内存泄漏。导致内存泄漏的原因主要可以分为两类，一类是资源未释放，例如IO、数据库连接等；另一类是长生命周期的对象引用了短生命周期的对象，导致短生命周期的对象无法被回收，例如经常被提及的ThreadLocal内存泄漏问题



线上应用挂了会导出Dump文件，讲OOm 导入虚拟机 jvisualvm 分析堆内存可以定位到分配过大内存的代码

如果没挂只能用阿里的 工具  ，也可以stop the world 导出线上的dump

jmap -histo:live pid



## 如何定位死锁





## 线上CPU打满为什么 怎么解决

在服务部署的机器上，使用top 命令，找到相关占用的PID,

ps -mp 找到进程下的线程占用CPU情况

jstack pid | grep tid >> x.txt

查到线程的运行状态日志可以看到

## 谈谈spring 、spring boot 、spring cloud 的理解

1. spring 两个核心功能点是IOC 和AOP ,一个是用来帮我们管理服务的bean,一个做到服务的切面编程。

2. spring boot 主要是为了让我们更好的使用spring ,内置了servlet 容器

3. spring cloud是一套框架的有序集合，他是基于spring boot 提出的一套微服务的解决方案，它为开发者提供快速构建应用的一些通用模式、例如配置管理、注册中心、服务发现、限流、网关。

   1. nacos 是如何发现服务的

      客户端会每隔一段时间拉取注册中心的全部示例存储在本地。


## 谈谈你常用的数据结构



## 谈谈你用过的中间件

1. 你用过redis 吗 怎么用的
2. redis 常用数据结构
3. redis 如何实现锁的
4. 你用过信号量 读写锁没有
5. es 映射  到排序等知识点讲解下
6. rocketMQ 简单谈谈你的理解

## 线程池简单谈谈你的理解

https://www.cnblogs.com/aaaazzzz/p/12892108.html?ivk_sa=1024320u#_label2

### 线程池的的执行流程

1. 当线程池小于corePoolSize时，新提交任务将创建一个新线程执行任务，即使此时线程池中存在空闲线程。
2. 当线程池达到corePoolSize时，新提交任务将被放入workQueue中，等待线程池中任务调度执行
3. 当workQueue已满，且maximumPoolSize>corePoolSize时，新提交任务会创建新线程执行任务
4. 当提交任务数超过maximumPoolSize时，新提交任务由RejectedExecutionHandler处理
5. 当线程池中超过corePoolSize线程，空闲时间达到keepAliveTime时，关闭空闲线程
6. 当设置allowCoreThreadTimeOut(true)时，线程池中corePoolSize线程空闲时间达到keepAliveTime也将关闭



### 线程池的使用场景

- newSingleThreadExecutor：一个单线程的线程池，可以用于需要保证顺序执行的场景，并且只有一个线程在执行。
- newFixedThreadPool：一个固定大小的线程池，可以用于已知并发压力的情况下，对线程数做限制。
- newCachedThreadPool：一个可以无限扩大的线程池，比较适合处理执行时间比较小的任务。
- newScheduledThreadPool：可以延时启动，定时启动的线程池，适用于需要多个后台线程执行周期任务的场景。
- newWorkStealingPool：一个拥有多个任务队列的线程池，可以减少连接数，创建当前可用cpu数量的线程来并行执行。





###  Java util 工具包常用的有那些

java.util 包提供了一些实用的方法和数据结构。比如日期类 Date，日历类 Calendar 以及随机数类 Random，同时包里还提供了 collection 框架，像堆栈 Stack、向量 Vector、位集合 Bitset 以及哈希表 Hashtable等表示数据结构的类



## 垃圾回收机制  如何能主动阻止垃圾回收

垃圾回收机制看其他参考

破坏主动回收 覆写finalize  方法





## spring boot启动的过程





## Spring AOP

https://blog.csdn.net/Cr1556648487/article/details/126777903

AOP 直译叫切面编程

经典应用场景例如 日志 事物 权限 检测等

AOP 实现过程就拦截特定的方法 实现对方法的增强，并且不会侵入到业务代码中

实现方式 有JDK代理和CGLib 代理



