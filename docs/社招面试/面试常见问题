## JVM 内存模型

https://zhuanlan.zhihu.com/p/38348646

![img](https://pic4.zhimg.com/80/v2-abefb713de46f1e6dd241246c0afe263_720w.webp)

**方法区**

​		线程共享。用于存放已被虚拟机加载的类信息，常量，静态变量等数据。即时编译器编译后的代码。

**堆**

​		线程共享。所有的对象实例以及数组都要在堆上分配。回收器主要管理的对象。

>  堆又可以分为新生代、老年代 。新生代又分为Eden区 S0 S1 
>
> 新创建的对象大多放在eden区、 eden区被填充满进行GC 就会把存活的对象放入一个幸存空间
>
> 再次触发GC的时候又把所有的幸存对象放入另一个幸存空间
>
> 多次存活的对象放入老年代

**本地方法栈**

​		线程私有。跟Java 虚拟机栈一样，只不过它只用在用native修饰的本地方法。

**Java虚拟机栈**

​		线程私有。存储局部变量表、操作栈、动态链接、方法出口，对象指针。

**程序计数器**

​		线程私有，用来记录线程的执行的字节码地址。





## Java 垃圾回收机制

https://www.infoq.cn/article/zoyqri4c-bfkmubmzmkn

### 引用计数法

针对每个对象分配一个空间用来记录该对象被引用的次数，如果该对象被其他对象引用就引用计数+1，删除引用就引用计数-1。当对象的引用计数为0时就可以在下一次GC的时候回收

循环依赖问题无法解决

### 可达性分析算法

可达性算法的思路就是通过一些被称之为GC Root的对象作为起点，从这些节点向下搜索。经过对象称为引用链，一个对象没有和任何引用链相连时，则证明对象不可用。

可作为Gc Root 的对象 

> - 虚拟机栈（栈帧中的本地变量表）中引用的对象
> - 方法区中类静态属性引用的对象
> - 方法区中常量引用的对象
> - 本地方法栈中 JNI（即一般说的 Native 方法）引用的对象

## 如何定位OOM

## 如何定位死锁

## 线程打满为什么 怎么解决



## 谈谈spring 、spring boot 、spring cloud 的理解

1. 谈谈spring-cloud 常用那些组件
2. spring cloud 中nacos 如何实现服务调用的
3. 

## 谈谈你常用的数据结构



## 谈谈你用过的中间件

1. 你用过redis 吗 怎么用的
2. redis 常用数据结构
3. redis 如何实现锁的
4. 你用过信号量 读写锁没有
5. es 映射  到排序等知识点讲解下
6. rocketMQ 简单谈谈你的理解

## 线程池简单谈谈你的理解

